/* eslint-disable */
/* 
* This file is auto-generated by Graphweaver. 
* Please do not edit it directly.
*/
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: any; output: any; }
};

export type AdminUiEntityAttributeMetadata = {
  __typename?: 'AdminUiEntityAttributeMetadata';
  exportPageSize?: Maybe<Scalars['Float']['output']>;
  isReadOnly?: Maybe<Scalars['Boolean']['output']>;
};

export type AdminUiEntityMetadata = {
  __typename?: 'AdminUiEntityMetadata';
  attributes: AdminUiEntityAttributeMetadata;
  backendId?: Maybe<Scalars['String']['output']>;
  defaultFilter?: Maybe<Scalars['JSON']['output']>;
  defaultSort?: Maybe<Scalars['JSON']['output']>;
  excludeFromTracing: Scalars['Boolean']['output'];
  fieldForDetailPanelNavigationId: Scalars['String']['output'];
  fields: Array<AdminUiFieldMetadata>;
  hideInSideBar: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  plural: Scalars['String']['output'];
  primaryKeyField: Scalars['String']['output'];
  summaryField?: Maybe<Scalars['String']['output']>;
  supportedAggregationTypes: Array<AggregationType>;
};

export type AdminUiEnumMetadata = {
  __typename?: 'AdminUiEnumMetadata';
  name: Scalars['String']['output'];
  values: Array<AdminUiEnumValueMetadata>;
};

export type AdminUiEnumValueMetadata = {
  __typename?: 'AdminUiEnumValueMetadata';
  name: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type AdminUiFieldAttributeMetadata = {
  __typename?: 'AdminUiFieldAttributeMetadata';
  isReadOnly: Scalars['Boolean']['output'];
  isRequired: Scalars['Boolean']['output'];
};

export type AdminUiFieldExtensionsMetadata = {
  __typename?: 'AdminUiFieldExtensionsMetadata';
  key?: Maybe<Scalars['String']['output']>;
};

export type AdminUiFieldMetadata = {
  __typename?: 'AdminUiFieldMetadata';
  attributes?: Maybe<AdminUiFieldAttributeMetadata>;
  extensions?: Maybe<AdminUiFieldExtensionsMetadata>;
  filter?: Maybe<AdminUiFilterMetadata>;
  hideInDetailForm?: Maybe<Scalars['Boolean']['output']>;
  hideInFilterBar?: Maybe<Scalars['Boolean']['output']>;
  hideInTable?: Maybe<Scalars['Boolean']['output']>;
  isArray?: Maybe<Scalars['Boolean']['output']>;
  name: Scalars['String']['output'];
  relatedEntity?: Maybe<Scalars['String']['output']>;
  relationshipType?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};

export type AdminUiFilterMetadata = {
  __typename?: 'AdminUiFilterMetadata';
  type: AdminUiFilterType;
};

export enum AdminUiFilterType {
  Boolean = 'BOOLEAN',
  DateRange = 'DATE_RANGE',
  Enum = 'ENUM',
  Numeric = 'NUMERIC',
  Relationship = 'RELATIONSHIP',
  Text = 'TEXT'
}

export type AdminUiMetadata = {
  __typename?: 'AdminUiMetadata';
  entities: Array<AdminUiEntityMetadata>;
  enums: Array<AdminUiEnumMetadata>;
};

export type AggregationResult = {
  __typename?: 'AggregationResult';
  count: Scalars['Int']['output'];
};

export enum AggregationType {
  Count = 'COUNT'
}

export type ApiKey = {
  __typename?: 'ApiKey';
  id: Scalars['ID']['output'];
  key: Scalars['String']['output'];
  revoked?: Maybe<Scalars['Boolean']['output']>;
  roles?: Maybe<Array<Scalars['String']['output']>>;
};

export type ApiKeyInsertInput = {
  key: Scalars['String']['input'];
  revoked?: InputMaybe<Scalars['Boolean']['input']>;
  roles?: InputMaybe<Array<Scalars['String']['input']>>;
  secret: Scalars['String']['input'];
};

export type ApiKeyUpdateInput = {
  id: Scalars['ID']['input'];
  key?: InputMaybe<Scalars['String']['input']>;
  revoked?: InputMaybe<Scalars['Boolean']['input']>;
  roles?: InputMaybe<Array<Scalars['String']['input']>>;
  secret?: InputMaybe<Scalars['String']['input']>;
};

export type ApiKeysListFilter = {
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  key?: InputMaybe<Scalars['String']['input']>;
  key_gt?: InputMaybe<Scalars['String']['input']>;
  key_gte?: InputMaybe<Scalars['String']['input']>;
  key_ilike?: InputMaybe<Scalars['String']['input']>;
  key_in?: InputMaybe<Array<Scalars['String']['input']>>;
  key_like?: InputMaybe<Scalars['String']['input']>;
  key_lt?: InputMaybe<Scalars['String']['input']>;
  key_lte?: InputMaybe<Scalars['String']['input']>;
  key_ne?: InputMaybe<Scalars['String']['input']>;
  key_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  key_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  key_null?: InputMaybe<Scalars['Boolean']['input']>;
  revoked?: InputMaybe<Scalars['Boolean']['input']>;
  revoked_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  revoked_ne?: InputMaybe<Scalars['Boolean']['input']>;
  revoked_nin?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  revoked_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  revoked_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Claim = {
  __typename?: 'Claim';
  createdAt?: Maybe<Scalars['String']['output']>;
  deleted?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  level?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  organization?: Maybe<Organization>;
  organization_aggregate?: Maybe<AggregationResult>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['String']['output']>;
};


export type ClaimOrganizationArgs = {
  filter?: InputMaybe<OrganizationsListFilter>;
};


export type ClaimOrganization_AggregateArgs = {
  filter?: InputMaybe<OrganizationsListFilter>;
};

/** Data needed to create or update Claims. If an ID is passed, this is an update, otherwise it's an insert. */
export type ClaimCreateOrUpdateInput = {
  createdAt?: InputMaybe<Scalars['String']['input']>;
  deleted?: InputMaybe<Scalars['Float']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  level?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  organization?: InputMaybe<OrganizationCreateOrUpdateInput>;
  type?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to create Claims. */
export type ClaimInsertInput = {
  createdAt?: InputMaybe<Scalars['String']['input']>;
  deleted?: InputMaybe<Scalars['Float']['input']>;
  level?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  organization?: InputMaybe<OrganizationCreateOrUpdateInput>;
  type?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to update Claims. An ID must be passed. */
export type ClaimUpdateInput = {
  createdAt?: InputMaybe<Scalars['String']['input']>;
  deleted?: InputMaybe<Scalars['Float']['input']>;
  id: Scalars['ID']['input'];
  level?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  organization?: InputMaybe<OrganizationCreateOrUpdateInput>;
  type?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['String']['input']>;
};

export type ClaimsListFilter = {
  createdAt?: InputMaybe<Scalars['String']['input']>;
  createdAt_gt?: InputMaybe<Scalars['String']['input']>;
  createdAt_gte?: InputMaybe<Scalars['String']['input']>;
  createdAt_ilike?: InputMaybe<Scalars['String']['input']>;
  createdAt_in?: InputMaybe<Array<Scalars['String']['input']>>;
  createdAt_like?: InputMaybe<Scalars['String']['input']>;
  createdAt_lt?: InputMaybe<Scalars['String']['input']>;
  createdAt_lte?: InputMaybe<Scalars['String']['input']>;
  createdAt_ne?: InputMaybe<Scalars['String']['input']>;
  createdAt_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  createdAt_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt_null?: InputMaybe<Scalars['Boolean']['input']>;
  deleted?: InputMaybe<Scalars['Float']['input']>;
  deleted_in?: InputMaybe<Array<Scalars['Float']['input']>>;
  deleted_ne?: InputMaybe<Scalars['Float']['input']>;
  deleted_nin?: InputMaybe<Array<Scalars['Float']['input']>>;
  deleted_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  deleted_null?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  level?: InputMaybe<Scalars['String']['input']>;
  level_gt?: InputMaybe<Scalars['String']['input']>;
  level_gte?: InputMaybe<Scalars['String']['input']>;
  level_ilike?: InputMaybe<Scalars['String']['input']>;
  level_in?: InputMaybe<Array<Scalars['String']['input']>>;
  level_like?: InputMaybe<Scalars['String']['input']>;
  level_lt?: InputMaybe<Scalars['String']['input']>;
  level_lte?: InputMaybe<Scalars['String']['input']>;
  level_ne?: InputMaybe<Scalars['String']['input']>;
  level_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  level_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  level_null?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_ilike?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_like?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_ne?: InputMaybe<Scalars['String']['input']>;
  name_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  name_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  name_null?: InputMaybe<Scalars['Boolean']['input']>;
  organization?: InputMaybe<OrganizationsListFilter>;
  type?: InputMaybe<Scalars['String']['input']>;
  type_gt?: InputMaybe<Scalars['String']['input']>;
  type_gte?: InputMaybe<Scalars['String']['input']>;
  type_ilike?: InputMaybe<Scalars['String']['input']>;
  type_in?: InputMaybe<Array<Scalars['String']['input']>>;
  type_like?: InputMaybe<Scalars['String']['input']>;
  type_lt?: InputMaybe<Scalars['String']['input']>;
  type_lte?: InputMaybe<Scalars['String']['input']>;
  type_ne?: InputMaybe<Scalars['String']['input']>;
  type_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  type_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  type_null?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['String']['input']>;
  updatedAt_gt?: InputMaybe<Scalars['String']['input']>;
  updatedAt_gte?: InputMaybe<Scalars['String']['input']>;
  updatedAt_ilike?: InputMaybe<Scalars['String']['input']>;
  updatedAt_in?: InputMaybe<Array<Scalars['String']['input']>>;
  updatedAt_like?: InputMaybe<Scalars['String']['input']>;
  updatedAt_lt?: InputMaybe<Scalars['String']['input']>;
  updatedAt_lte?: InputMaybe<Scalars['String']['input']>;
  updatedAt_ne?: InputMaybe<Scalars['String']['input']>;
  updatedAt_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  updatedAt_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ClaimsOrderByInput = {
  createdAt?: InputMaybe<Sort>;
  deleted?: InputMaybe<Sort>;
  id?: InputMaybe<Sort>;
  level?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
  type?: InputMaybe<Sort>;
  updatedAt?: InputMaybe<Sort>;
};

/** Pagination options for Claims. */
export type ClaimsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ClaimsOrderByInput>;
};

export type Credential = {
  __typename?: 'Credential';
  id: Scalars['ID']['output'];
  username: Scalars['String']['output'];
};

export type CredentialInsertInput = {
  confirm: Scalars['String']['input'];
  password: Scalars['String']['input'];
  username: Scalars['String']['input'];
};

export type CredentialUpdateInput = {
  confirm?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
  password?: InputMaybe<Scalars['String']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

export type CredentialsListFilter = {
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
  username_gt?: InputMaybe<Scalars['String']['input']>;
  username_gte?: InputMaybe<Scalars['String']['input']>;
  username_ilike?: InputMaybe<Scalars['String']['input']>;
  username_in?: InputMaybe<Array<Scalars['String']['input']>>;
  username_like?: InputMaybe<Scalars['String']['input']>;
  username_lt?: InputMaybe<Scalars['String']['input']>;
  username_lte?: InputMaybe<Scalars['String']['input']>;
  username_ne?: InputMaybe<Scalars['String']['input']>;
  username_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  username_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  username_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DeleteOneFilterInput = {
  id: Scalars['ID']['input'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create a single Claim. */
  createClaim?: Maybe<Claim>;
  /** Create many Claims. */
  createClaims?: Maybe<Array<Maybe<Claim>>>;
  /** Create or update many Claims. */
  createOrUpdateClaims?: Maybe<Array<Maybe<Claim>>>;
  /** Create or update many Organizations. */
  createOrUpdateOrganizations?: Maybe<Array<Maybe<Organization>>>;
  /** Create a single Organization. */
  createOrganization?: Maybe<Organization>;
  /** Create many Organizations. */
  createOrganizations?: Maybe<Array<Maybe<Organization>>>;
  /** Delete a single Claim. */
  deleteClaim?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Claims with a filter. */
  deleteClaims?: Maybe<Scalars['Boolean']['output']>;
  /** Delete a single Organization. */
  deleteOrganization?: Maybe<Scalars['Boolean']['output']>;
  /** Delete many Organizations with a filter. */
  deleteOrganizations?: Maybe<Scalars['Boolean']['output']>;
  sendChallengeMagicLink?: Maybe<Token>;
  sendLoginMagicLink?: Maybe<Scalars['Boolean']['output']>;
  /** Update a single Claim. */
  updateClaim?: Maybe<Claim>;
  /** Update many Claims. */
  updateClaims?: Maybe<Array<Maybe<Claim>>>;
  /** Update a single Organization. */
  updateOrganization?: Maybe<Organization>;
  /** Update many Organizations. */
  updateOrganizations?: Maybe<Array<Maybe<Organization>>>;
  verifyChallengeMagicLink?: Maybe<Token>;
  verifyLoginMagicLink?: Maybe<Token>;
};


export type MutationCreateClaimArgs = {
  input: ClaimInsertInput;
};


export type MutationCreateClaimsArgs = {
  input: Array<ClaimInsertInput>;
};


export type MutationCreateOrUpdateClaimsArgs = {
  input: Array<ClaimCreateOrUpdateInput>;
};


export type MutationCreateOrUpdateOrganizationsArgs = {
  input: Array<OrganizationCreateOrUpdateInput>;
};


export type MutationCreateOrganizationArgs = {
  input: OrganizationInsertInput;
};


export type MutationCreateOrganizationsArgs = {
  input: Array<OrganizationInsertInput>;
};


export type MutationDeleteClaimArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteClaimsArgs = {
  filter: ClaimsListFilter;
};


export type MutationDeleteOrganizationArgs = {
  filter: DeleteOneFilterInput;
};


export type MutationDeleteOrganizationsArgs = {
  filter: OrganizationsListFilter;
};


export type MutationSendLoginMagicLinkArgs = {
  username?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateClaimArgs = {
  input: ClaimUpdateInput;
};


export type MutationUpdateClaimsArgs = {
  input: Array<ClaimUpdateInput>;
};


export type MutationUpdateOrganizationArgs = {
  input: OrganizationUpdateInput;
};


export type MutationUpdateOrganizationsArgs = {
  input: Array<OrganizationUpdateInput>;
};


export type MutationVerifyChallengeMagicLinkArgs = {
  token?: InputMaybe<Scalars['String']['input']>;
};


export type MutationVerifyLoginMagicLinkArgs = {
  token?: InputMaybe<Scalars['String']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

export type Organization = {
  __typename?: 'Organization';
  claims: Array<Claim>;
  claims_aggregate?: Maybe<AggregationResult>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};


export type OrganizationClaimsArgs = {
  filter?: InputMaybe<ClaimsListFilter>;
};


export type OrganizationClaims_AggregateArgs = {
  filter?: InputMaybe<ClaimsListFilter>;
};

/** Data needed to create or update Organizations. If an ID is passed, this is an update, otherwise it's an insert. */
export type OrganizationCreateOrUpdateInput = {
  claims?: InputMaybe<Array<ClaimCreateOrUpdateInput>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Data needed to create Organizations. */
export type OrganizationInsertInput = {
  claims?: InputMaybe<Array<ClaimCreateOrUpdateInput>>;
  name: Scalars['String']['input'];
};

/** Data needed to update Organizations. An ID must be passed. */
export type OrganizationUpdateInput = {
  claims?: InputMaybe<Array<ClaimCreateOrUpdateInput>>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
};

export type OrganizationsListFilter = {
  claims?: InputMaybe<ClaimsListFilter>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_ne?: InputMaybe<Scalars['ID']['input']>;
  id_nin?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  id_null?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_ilike?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_like?: InputMaybe<Scalars['String']['input']>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_ne?: InputMaybe<Scalars['String']['input']>;
  name_nin?: InputMaybe<Array<Scalars['String']['input']>>;
  name_notnull?: InputMaybe<Scalars['Boolean']['input']>;
  name_null?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrganizationsOrderByInput = {
  id?: InputMaybe<Sort>;
  name?: InputMaybe<Sort>;
};

/** Pagination options for Organizations. */
export type OrganizationsPaginationInput = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<OrganizationsOrderByInput>;
};

export type PasskeyAuthenticationResponse = {
  authenticatorAttachment?: InputMaybe<Scalars['String']['input']>;
  clientExtensionResults: Scalars['JSON']['input'];
  id: Scalars['ID']['input'];
  rawId: Scalars['String']['input'];
  response: Scalars['JSON']['input'];
  type: Scalars['String']['input'];
};

export type PasskeyRegistrationResponse = {
  authenticatorAttachment?: InputMaybe<Scalars['String']['input']>;
  clientExtensionResults: Scalars['JSON']['input'];
  id: Scalars['ID']['input'];
  rawId: Scalars['String']['input'];
  response: Scalars['JSON']['input'];
  type: Scalars['String']['input'];
};

export type Query = {
  __typename?: 'Query';
  /** Query used by the Admin UI to introspect the schema and metadata. */
  _graphweaver?: Maybe<AdminUiMetadata>;
  /** Get a single Claim. */
  claim?: Maybe<Claim>;
  /** Get multiple Claims. */
  claims?: Maybe<Array<Maybe<Claim>>>;
  /** Get aggregated data for Claims. */
  claims_aggregate?: Maybe<AggregationResult>;
  /** Get a single Organization. */
  organization?: Maybe<Organization>;
  /** Get multiple Organizations. */
  organizations?: Maybe<Array<Maybe<Organization>>>;
  /** Get aggregated data for Organizations. */
  organizations_aggregate?: Maybe<AggregationResult>;
};


export type QueryClaimArgs = {
  id: Scalars['ID']['input'];
};


export type QueryClaimsArgs = {
  filter?: InputMaybe<ClaimsListFilter>;
  pagination?: InputMaybe<ClaimsPaginationInput>;
};


export type QueryClaims_AggregateArgs = {
  filter?: InputMaybe<ClaimsListFilter>;
};


export type QueryOrganizationArgs = {
  id: Scalars['ID']['input'];
};


export type QueryOrganizationsArgs = {
  filter?: InputMaybe<OrganizationsListFilter>;
  pagination?: InputMaybe<OrganizationsPaginationInput>;
};


export type QueryOrganizations_AggregateArgs = {
  filter?: InputMaybe<OrganizationsListFilter>;
};

export enum Sort {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type Token = {
  __typename?: 'Token';
  authToken: Scalars['String']['output'];
};
